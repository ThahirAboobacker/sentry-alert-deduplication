{
  "service": {
    "service": "sentry-alert-deduplication",
    "serviceObject": {
      "name": "sentry-alert-deduplication"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "stage": "dev",
      "memorySize": 512,
      "timeout": 30,
      "environment": {
        "SUPEROPS_MODE": "DEMO",
        "SUPEROPS_API_KEY": "",
        "SUPEROPS_ORG_ID": "",
        "METRICS_TABLE": "sentry-alert-deduplication-metrics-dev",
        "ERRORS_TABLE": "sentry-alert-deduplication-errors-dev"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:*:table/sentry-alert-deduplication-metrics-dev",
                "arn:aws:dynamodb:us-east-1:*:table/sentry-alert-deduplication-errors-dev"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "WebhookHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sentry-alert-deduplication-dev-webhookHandler"
            }
          },
          "DemoHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sentry-alert-deduplication-dev-demoHandler"
            }
          },
          "MetricsHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sentry-alert-deduplication-dev-metricsHandler"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "sentry-alert-deduplication",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sentry-alert-deduplication-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sentry-alert-deduplication-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "sentry-alert-deduplication",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "WebhookHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-27d2a445-ad71",
                "S3Key": "serverless/sentry-alert-deduplication/dev/1761680489560-2025-10-28T19:41:29.560Z/sentry-alert-deduplication.zip"
              },
              "Handler": "lambda/sentry-webhook-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sentry-alert-deduplication-dev-webhookHandler",
              "MemorySize": 512,
              "Timeout": 30,
              "Description": "Sentry Alert Deduplication Webhook Handler - SuperHack 2025",
              "Environment": {
                "Variables": {
                  "SUPEROPS_MODE": "DEMO",
                  "SUPEROPS_API_KEY": "",
                  "SUPEROPS_ORG_ID": "",
                  "METRICS_TABLE": "sentry-alert-deduplication-metrics-dev",
                  "ERRORS_TABLE": "sentry-alert-deduplication-errors-dev",
                  "FUNCTION_NAME": "sentry-webhook-handler"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WebhookHandlerLogGroup"
            ]
          },
          "DemoHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-27d2a445-ad71",
                "S3Key": "serverless/sentry-alert-deduplication/dev/1761680489560-2025-10-28T19:41:29.560Z/sentry-alert-deduplication.zip"
              },
              "Handler": "lambda/sentry-demo-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sentry-alert-deduplication-dev-demoHandler",
              "MemorySize": 512,
              "Timeout": 30,
              "Description": "Sentry Demo Handler for Judge Presentations",
              "Environment": {
                "Variables": {
                  "SUPEROPS_MODE": "DEMO",
                  "SUPEROPS_API_KEY": "",
                  "SUPEROPS_ORG_ID": "",
                  "METRICS_TABLE": "sentry-alert-deduplication-metrics-dev",
                  "ERRORS_TABLE": "sentry-alert-deduplication-errors-dev",
                  "FUNCTION_NAME": "sentry-demo-handler"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DemoHandlerLogGroup"
            ]
          },
          "MetricsHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-27d2a445-ad71",
                "S3Key": "serverless/sentry-alert-deduplication/dev/1761680489560-2025-10-28T19:41:29.560Z/sentry-alert-deduplication.zip"
              },
              "Handler": "lambda/sentry-metrics-handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sentry-alert-deduplication-dev-metricsHandler",
              "MemorySize": 512,
              "Timeout": 30,
              "Description": "Sentry Metrics and Status Handler",
              "Environment": {
                "Variables": {
                  "SUPEROPS_MODE": "DEMO",
                  "SUPEROPS_API_KEY": "",
                  "SUPEROPS_ORG_ID": "",
                  "METRICS_TABLE": "sentry-alert-deduplication-metrics-dev",
                  "ERRORS_TABLE": "sentry-alert-deduplication-errors-dev",
                  "FUNCTION_NAME": "sentry-metrics-handler"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MetricsHandlerLogGroup"
            ]
          },
          "WebhookHandlerLambdaVersionm6t6o8ySgCTmL7bgMmOslu88IDa6nX3U5tbCY6c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WebhookHandlerLambdaFunction"
              },
              "CodeSha256": "jm1zk3XYz8Qa4ZP836DxmdIMGNKc6oy6lB6j+scTfLk=",
              "Description": "Sentry Alert Deduplication Webhook Handler - SuperHack 2025"
            }
          },
          "DemoHandlerLambdaVersionosbs8CDHRhYFgaFlfIrd7CqcO1mlg02L98TI5Nxexg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DemoHandlerLambdaFunction"
              },
              "CodeSha256": "jm1zk3XYz8Qa4ZP836DxmdIMGNKc6oy6lB6j+scTfLk=",
              "Description": "Sentry Demo Handler for Judge Presentations"
            }
          },
          "MetricsHandlerLambdaVersionZ4Ilbf3Hq8ULUn0p6yTN76GcfCvdNJPk2O1MBoisTI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MetricsHandlerLambdaFunction"
              },
              "CodeSha256": "jm1zk3XYz8Qa4ZP836DxmdIMGNKc6oy6lB6j+scTfLk=",
              "Description": "Sentry Metrics and Status Handler"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-sentry-alert-deduplication",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceWebhook": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "webhook",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDemo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "demo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMetrics": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "metrics",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "status",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWebhookOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDemoOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMetricsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMetrics"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodStatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWebhookPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebhookHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WebhookHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWebhookGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WebhookHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WebhookHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDemoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DemoHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DemoHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDemoPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DemoHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DemoHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMetricsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMetrics"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MetricsHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MetricsHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodStatusGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MetricsHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MetricsHandlerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1761680475181": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodWebhookOptions",
              "ApiGatewayMethodDemoOptions",
              "ApiGatewayMethodMetricsOptions",
              "ApiGatewayMethodStatusOptions",
              "ApiGatewayMethodWebhookPost",
              "ApiGatewayMethodWebhookGet",
              "ApiGatewayMethodDemoGet",
              "ApiGatewayMethodDemoPost",
              "ApiGatewayMethodMetricsGet",
              "ApiGatewayMethodStatusGet"
            ]
          },
          "WebhookHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WebhookHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DemoHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DemoHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MetricsHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MetricsHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SentryMetricsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "sentry-alert-deduplication-metrics-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "timestamp-index",
                  "KeySchema": [
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Project",
                  "Value": "Sentry"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Hackathon",
                  "Value": "SuperHack2025"
                }
              ]
            }
          },
          "SentryErrorsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "sentry-alert-deduplication-errors-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Project",
                  "Value": "Sentry"
                },
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Hackathon",
                  "Value": "SuperHack2025"
                }
              ]
            }
          },
          "SentryDashboard": {
            "Type": "AWS::CloudWatch::Dashboard",
            "Properties": {
              "DashboardName": "Sentry-AlertProcessing-dev",
              "DashboardBody": "{\n  \"widgets\": [\n    {\n      \"type\": \"metric\",\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n          [ \"Sentry/AlertProcessing\", \"AlertsProcessed\" ],\n          [ \".\", \"AlertsEscalated\" ],\n          [ \".\", \"DuplicatesRemoved\" ]\n        ],\n        \"period\": 300,\n        \"stat\": \"Sum\",\n        \"region\": \"us-east-1\",\n        \"title\": \"Sentry Alert Processing\"\n      }\n    },\n    {\n      \"type\": \"metric\",\n      \"x\": 12,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n          [ \"Sentry/AlertProcessing\", \"NoiseReduction\" ]\n        ],\n        \"period\": 300,\n        \"stat\": \"Average\",\n        \"region\": \"us-east-1\",\n        \"title\": \"Noise Reduction Percentage\"\n      }\n    }\n  ]\n}\n"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-27d2a445-ad71",
            "Export": {
              "Name": "sls-sentry-alert-deduplication-dev-ServerlessDeploymentBucketName"
            }
          },
          "WebhookHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WebhookHandlerLambdaVersionm6t6o8ySgCTmL7bgMmOslu88IDa6nX3U5tbCY6c"
            },
            "Export": {
              "Name": "sls-sentry-alert-deduplication-dev-WebhookHandlerLambdaFunctionQualifiedArn"
            }
          },
          "DemoHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DemoHandlerLambdaVersionosbs8CDHRhYFgaFlfIrd7CqcO1mlg02L98TI5Nxexg"
            },
            "Export": {
              "Name": "sls-sentry-alert-deduplication-dev-DemoHandlerLambdaFunctionQualifiedArn"
            }
          },
          "MetricsHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MetricsHandlerLambdaVersionZ4Ilbf3Hq8ULUn0p6yTN76GcfCvdNJPk2O1MBoisTI"
            },
            "Export": {
              "Name": "sls-sentry-alert-deduplication-dev-MetricsHandlerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-sentry-alert-deduplication-dev-ServiceEndpoint"
            }
          },
          "WebhookUrl": {
            "Description": "Sentry Webhook URL for SuperOps Integration",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "dev",
                  "/webhook"
                ]
              ]
            },
            "Export": {
              "Name": "sentry-alert-deduplication-webhook-url-dev"
            }
          },
          "DemoUrl": {
            "Description": "Sentry Demo URL for Judge Presentations",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "dev",
                  "/demo"
                ]
              ]
            },
            "Export": {
              "Name": "sentry-alert-deduplication-demo-url-dev"
            }
          },
          "MetricsUrl": {
            "Description": "Sentry Metrics URL",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "dev",
                  "/metrics"
                ]
              ]
            },
            "Export": {
              "Name": "sentry-alert-deduplication-metrics-url-dev"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "webhookHandler": {
        "handler": "lambda/sentry-webhook-handler.handler",
        "description": "Sentry Alert Deduplication Webhook Handler - SuperHack 2025",
        "events": [
          {
            "http": {
              "path": "webhook",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "webhook",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "FUNCTION_NAME": "sentry-webhook-handler"
        },
        "name": "sentry-alert-deduplication-dev-webhookHandler",
        "package": {},
        "memory": 512,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WebhookHandlerLambdaVersionm6t6o8ySgCTmL7bgMmOslu88IDa6nX3U5tbCY6c"
      },
      "demoHandler": {
        "handler": "lambda/sentry-demo-handler.handler",
        "description": "Sentry Demo Handler for Judge Presentations",
        "events": [
          {
            "http": {
              "path": "demo",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "demo",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "FUNCTION_NAME": "sentry-demo-handler"
        },
        "name": "sentry-alert-deduplication-dev-demoHandler",
        "package": {},
        "memory": 512,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DemoHandlerLambdaVersionosbs8CDHRhYFgaFlfIrd7CqcO1mlg02L98TI5Nxexg"
      },
      "metricsHandler": {
        "handler": "lambda/sentry-metrics-handler.handler",
        "description": "Sentry Metrics and Status Handler",
        "events": [
          {
            "http": {
              "path": "metrics",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "status",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "FUNCTION_NAME": "sentry-metrics-handler"
        },
        "name": "sentry-alert-deduplication-dev-metricsHandler",
        "package": {},
        "memory": 512,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MetricsHandlerLambdaVersionZ4Ilbf3Hq8ULUn0p6yTN76GcfCvdNJPk2O1MBoisTI"
      }
    },
    "resources": {
      "Resources": {
        "SentryMetricsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "sentry-alert-deduplication-metrics-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "timestamp-index",
                "KeySchema": [
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "Sentry"
              },
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Hackathon",
                "Value": "SuperHack2025"
              }
            ]
          }
        },
        "SentryErrorsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "sentry-alert-deduplication-errors-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "Sentry"
              },
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Hackathon",
                "Value": "SuperHack2025"
              }
            ]
          }
        },
        "SentryDashboard": {
          "Type": "AWS::CloudWatch::Dashboard",
          "Properties": {
            "DashboardName": "Sentry-AlertProcessing-dev",
            "DashboardBody": "{\n  \"widgets\": [\n    {\n      \"type\": \"metric\",\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n          [ \"Sentry/AlertProcessing\", \"AlertsProcessed\" ],\n          [ \".\", \"AlertsEscalated\" ],\n          [ \".\", \"DuplicatesRemoved\" ]\n        ],\n        \"period\": 300,\n        \"stat\": \"Sum\",\n        \"region\": \"us-east-1\",\n        \"title\": \"Sentry Alert Processing\"\n      }\n    },\n    {\n      \"type\": \"metric\",\n      \"x\": 12,\n      \"y\": 0,\n      \"width\": 12,\n      \"height\": 6,\n      \"properties\": {\n        \"metrics\": [\n          [ \"Sentry/AlertProcessing\", \"NoiseReduction\" ]\n        ],\n        \"period\": 300,\n        \"stat\": \"Average\",\n        \"region\": \"us-east-1\",\n        \"title\": \"Noise Reduction Percentage\"\n      }\n    }\n  ]\n}\n"
          }
        }
      },
      "Outputs": {
        "WebhookUrl": {
          "Description": "Sentry Webhook URL for SuperOps Integration",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "dev",
                "/webhook"
              ]
            ]
          },
          "Export": {
            "Name": "sentry-alert-deduplication-webhook-url-dev"
          }
        },
        "DemoUrl": {
          "Description": "Sentry Demo URL for Judge Presentations",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "dev",
                "/demo"
              ]
            ]
          },
          "Export": {
            "Name": "sentry-alert-deduplication-demo-url-dev"
          }
        },
        "MetricsUrl": {
          "Description": "Sentry Metrics URL",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "dev",
                "/metrics"
              ]
            ]
          },
          "Export": {
            "Name": "sentry-alert-deduplication-metrics-url-dev"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "sentry-alert-deduplication",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\project\\aws\\.serverless\\sentry-alert-deduplication.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/sentry-alert-deduplication/dev/1761680489560-2025-10-28T19:41:29.560Z",
    "artifact": "sentry-alert-deduplication.zip"
  }
}